Step 7A — Add ReportLab & PDF helper

1) Append to backend/requirements.txt:
reportlab

2) Create backend/app/exporter.py:

from io import BytesIO
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm

def build_summary_pdf(*, app_name: str, locale: str, extracted_text: str, explained_items: list, disclaimer: str) -> bytes:
    buf = BytesIO()
    c = canvas.Canvas(buf, pagesize=A4)
    W, H = A4
    x, y = 2*cm, H - 2*cm

    def writeln(text, size=11, leading=14):
        nonlocal y
        if y < 2*cm:
            c.showPage(); y = H - 2*cm
        c.setFont("Helvetica", size)
        for line in text.split("\n"):
            c.drawString(x, y, line)
            y -= leading

    # Header
    c.setFont("Helvetica-Bold", 16)
    c.drawString(x, y, f"{app_name} — Summary")
    y -= 20
    c.setFont("Helvetica", 9)
    c.drawString(x, y, datetime.now().strftime("%Y-%m-%d %H:%M"))
    y -= 18

    # Disclaimer
    c.setFont("Helvetica-Oblique", 9)
    writeln(disclaimer, size=9, leading=12)
    y -= 6

    # Extracted text (snippet)
    c.setFont("Helvetica-Bold", 12)
    writeln("Extracted Text", size=12, leading=16)
    c.setFont("Helvetica", 9)
    snippet = (extracted_text or "")[:800]
    writeln(snippet or "(none)", size=9, leading=12)
    y -= 6

    # Analytes
    c.setFont("Helvetica-Bold", 12)
    writeln("Analytes", size=12, leading=16)
    c.setFont("Helvetica", 9)
    if not explained_items:
        writeln("(no analytes)", size=9, leading=12)
    else:
        for it in explained_items:
            name = it.get("analyte","?")
            val  = it.get("value")
            unit = it.get("unit","")
            lvl  = it.get("level","")
            rr   = it.get("refRange") or {}
            msg  = it.get("message","")
            line1 = f"• {name}: {val} {unit}  —  Level: {lvl}"
            line2 = f"   Range: {rr.get('low')}–{rr.get('high')} {rr.get('unit','')}"
            writeln(line1, size=9, leading=12)
            writeln(line2, size=9, leading=12)
            if msg:
                writeln(f"   Note: {msg}", size=9, leading=12)
            srcs = it.get("sources") or []
            if srcs:
                writeln("   Sources:", size=9, leading=12)
                for s in srcs[:3]:
                    writeln(f"     - {s}", size=9, leading=12)
            y -= 4

    c.showPage()
    c.save()
    return buf.getvalue()
