Step 5C-A â€” API helper + Results Store

1) Create frontend/src/lib/api.ts
---------------------------------
export const API =
  import.meta.env.VITE_API_URL || "http://localhost:8000";

export async function postExtract(file: File) {
  const form = new FormData();
  form.append("file", file);
  const res = await fetch(`${API}/extract`, {
    method: "POST",
    body: form,
  });
  return res.json();
}

export async function postExplain(items: any[]) {
  const res = await fetch(`${API}/explain`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ items }),
  });
  return res.json();
}

2) Create frontend/src/store/results.tsx
----------------------------------------
import React, { createContext, useContext, useState } from "react";

export interface Extracted {
  text: string;
  fields: any[];
  warnings: string[];
}

export interface Explained {
  items: any[];
  warnings: string[];
}

interface ResultsContextType {
  extracted: Extracted | null;
  setExtracted: (v: Extracted | null) => void;
  explained: Explained | null;
  setExplained: (v: Explained | null) => void;
  explaining: boolean;
  setExplaining: (v: boolean) => void;
}

const ResultsContext = createContext<ResultsContextType | undefined>(
  undefined
);

export const ResultsProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [extracted, setExtracted] = useState<Extracted | null>(null);
  const [explained, setExplained] = useState<Explained | null>(null);
  const [explaining, setExplaining] = useState(false);

  return (
    <ResultsContext.Provider
      value={{
        extracted,
        setExtracted,
        explained,
        setExplained,
        explaining,
        setExplaining,
      }}
    >
      {children}
    </ResultsContext.Provider>
  );
};

export function useResults() {
  const ctx = useContext(ResultsContext);
  if (!ctx) throw new Error("useResults must be used inside ResultsProvider");
  return ctx;
}

3) Wrap <App/> in frontend/src/main.tsx:
----------------------------------------
import { ResultsProvider } from "./store/results";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <ResultsProvider>
      <App />
    </ResultsProvider>
  </React.StrictMode>
);
